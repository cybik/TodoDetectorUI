package com.cybikbase.vidbandwith;

import org.apache.http.Header;
import org.apache.http.HeaderIterator;
import org.apache.http.HttpResponse;

import com.actionbarsherlock.app.SherlockActivity;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuItem;
import com.actionbarsherlock.view.MenuItem.OnMenuItemClickListener;
import com.actionbarsherlock.app.ActionBar;
import com.actionbarsherlock.app.ActionBar.Tab;

import com.cybikbase.vidbandwith.datatype.VideotronData;
import com.cybikbase.vidbandwith.network.VideotronNetworkChatter;
import com.cybikbase.vidbandwith.network.interfaces.IVideotronNetworkResponse;
import com.cybikbase.vidbandwith.utilities.json.DataExtractor;
import com.cybikbase.vidbandwith.utilities.ui.toaster;
import com.google.gson.Gson;
import com.google.gson.JsonObject;

import android.content.Intent;
import android.content.res.Configuration;
import android.os.Bundle;
import android.os.Handler;
import android.preference.PreferenceManager;
import android.util.Log;
import android.widget.TextView;

public class VideotronBandwidthMeterActivity extends SherlockActivity implements ActionBar.TabListener, IVideotronNetworkResponse {

	/*******************************************************
	 *                                                     *
	 *                   Class Variables                   *
	 *                                                     *
	 *******************************************************/
	// Inter-thread Message Handler
	private final Handler mMessageChannel = new Handler();
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		MenuItem prefsMenu = menu.add("Preferences");
		prefsMenu.setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS | MenuItem.SHOW_AS_ACTION_WITH_TEXT);
		prefsMenu.setIcon(R.drawable.ic_prefs_enabled_scaled);
		prefsMenu.setOnMenuItemClickListener(getPrefsInvokeClickListener());
		

		return super.onCreateOptionsMenu(menu);
	}

	/*******************************************************
	 *                                                     *
	 *                  Application Code                   *
	 *                                                     *
	 *******************************************************/
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		
		setContentView(R.layout.main);

        getSupportActionBar().setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
        for (int i = 0; i < 3; i++) {
            ActionBar.Tab tab = getSupportActionBar().newTab();
            tab.setTabListener(this);
            tab.setText("Tab " + i);
            getSupportActionBar().addTab(tab);
        }
		requestVideotronDataSync();

		toaster.printMessage(this, "launched the data request, what the fuck ever");
	}
	
	// Return method after the request successfully happened
	/*public void processVideotronData(JsonObject pData) {
		Gson moo = new Gson();
		VideotronData instance = moo.fromJson(pData, VideotronData.class);
	}*/

	public void processVideotronData(VideotronData pData) {
		toaster.printMessage(this, "fuck yeah decrypted datasync: " + pData.getInternetAccounts().get(0).getPackageName());
		//((TextView)findViewById(R.id.text)).setText(pData.getInternetAccounts().get(0).getPackageName());
	}
	/*******************************************************
	 *                                                     *
	 *                   Data Requesting                   *
	 *                                                     *
	 *******************************************************/
	// JSON Data decryption happens in a network-approach-coded library (from google)
	// basically, we need to process that data in another thread and keep any laggy
	// stuff from the UI thread.
	private void requestDataSync() {
		toaster.printMessage(this, "attempting datasync");
		String lBaseURL = getValueFromPreference(getString(R.string.strVidUserCode));
		if(lBaseURL.equalsIgnoreCase("")){
			toaster.printMessage(this, "You have not configured the base URL correctly. RTFM or GTFO");
			return;
		}
		VideotronNetworkChatter.getVideotronData(lVidKey, this);
	}
	private void processResponseInThread(HttpResponse response){

		final HttpResponse argument = response;
		
		new Thread(new Runnable() {
			public void run() {
				JsonObject lNetResponse = null;
				lNetResponse = DataExtractor.getJsonObjectFromEntity(argument.getEntity());
				Elements returnData = 
						(new Gson()).fromJson(lNetResponse, Elements.class);
				mMessageChannel.post(new ServerDataRunnable(returnData));
			}
		}).start();
	}
	private class ServerDataRunnable implements Runnable {
		ServerDataRunnable(Elements pObject) {
			communicatedObject = pObject;
		}
		protected Elements communicatedObject = null;
		public void run() {
			processServerData(communicatedObject);
		}
	}
	
	/*******************************************************
	 *                                                     *
	 *                  UI Event Handlers                  *
	 *                                                     *
	 *******************************************************/
	private OnMenuItemClickListener mPrefsInvokeClickListener = new OnMenuItemClickListener() {

		public boolean onMenuItemClick(MenuItem item) {
			Intent i = new Intent(getActivity(), VideotronBWMPreferences.class);
			startActivity(i);
			return false;
		}
	};
	private OnMenuItemClickListener getPrefsInvokeClickListener() {
		return mPrefsInvokeClickListener;
	}

	/*******************************************************
	 *                                                     *
	 *                   Utility Methods                   *
	 *                                                     *
	 *******************************************************/
	private VideotronBandwidthMeterActivity getActivity() {return this;}

	private String getValueFromPreference(String pKey) {
		return PreferenceManager.getDefaultSharedPreferences(this).getString(pKey, "");
	}


	private void printHeader(HeaderIterator headerIterator) {
		while (headerIterator.hasNext())
			Log.d("HeaderPrint", ((Header)headerIterator.next()).toString());	
	}

	/*******************************************************
	 *                                                     *
	 *               Implementation Methods                *
	 *                                                     *
	 *******************************************************/

	/**
	 * ActionBar.TabListener
	 */
	public void onTabSelected(Tab tab) {
		// TODO Auto-generated method stub
		getMainText().setText("Switched to tab " + String.valueOf(tab.getPosition()));
	}

	public void onTabUnselected(Tab tab) {
		// TODO Auto-generated method stub
		
	}

	public void onTabReselected(Tab tab) {
		// TODO Auto-generated method stub
		
	}

	/**
	 * IVideotronNetworkResponse
	 */
	public void onVideotronNetworkResponseReceived(HttpResponse response) {
		printHeader(response.headerIterator());
		processResponseInThread(response);
	}

	/*******************************************************
	 *                                                     *
	 *                   Access Methods                    *
	 *                                                     *
	 *******************************************************/
	protected TextView getMainText() {
		return (TextView) this.findViewById(R.id.text);
	}
}